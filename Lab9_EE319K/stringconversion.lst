


ARM Macro Assembler    Page 1 


    1 00000000         ; StringConversion.s
    2 00000000         ; Student names: Vu Duy Phuong
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; ECE319K lab 7 number to string conversions
    6 00000000         ;
    7 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
    8 00000000         
    9 00000000         
   10 00000000                 EXPORT           Dec2String
   11 00000000                 EXPORT           Fix2String
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 PRESERVE8
   15 00000000         
   16 00000000         
   17 00000000         ;-----------------------Dec2String----------------------
                       -
   18 00000000         ; Convert a 32-bit number into unsigned decimal format
   19 00000000         ; String the string into the empty array add null-termin
                       ation
   20 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   21 00000000         ;        R1 pointer to empty array
   22 00000000         ; Output: none
   23 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   24 00000000 00000000 
                       i       EQU              0
   25 00000000 00000004 
                       num     EQU              4
   26 00000000 00000008 
                       delta   EQU              8
   27 00000000         Dec2String
   28 00000000 E92D 43F0       PUSH{R4,R5,R6,R7,R8,R9,LR}
   29 00000004 B082            SUB              SP,#8
   30 00000006 F04F 0400       MOV              R4,#0
   31 0000000A 9400            STR              R4,[SP,#i]  ; Initialize i on s
                                                            tack
   32 0000000C 4604            MOV              R4,R0       ; R4=R0(n)
   33 0000000E 2C00            CMP              R4,#0
   34 00000010 D110            BNE              jmp         ; -> jmp
   35 00000012 9E00            LDR              R6,[SP,#i]
   36 00000014 EA4F 0506       LSL              R5,R6,#0
   37 00000018 F04F 0730       MOV              R7,#0x30
   38 0000001C 514F            STR              R7,[R1,R5]
   39 0000001E F106 0601       ADD              R6,#1
   40 00000022 EA4F 0506       LSL              R5,R6,#0
   41 00000026 F04F 0700       MOV              R7,#0x0
   42 0000002A 514F            STR              R7,[R1,R5]
   43 0000002C F04F 0600       MOV              R6,#0
   44 00000030 9600            STR              R6,[SP,#i]
   45 00000032 E034            B                jmp_1
   46 00000034         jmp
   47 00000034         loop_1                               ; count the number 
                                                            of digits of R0
   48 00000034 2C00            CMP              R4,#0x0



ARM Macro Assembler    Page 2 


   49 00000036 D008            BEQ              loop_2
   50 00000038 F04F 050A       MOV              R5,#10
   51 0000003C 9E00            LDR              R6,[SP,#i]
   52 0000003E FBB4 F4F5       UDIV             R4,R4,R5
   53 00000042 F106 0601       ADD              R6,#1       ; i++
   54 00000046 9600            STR              R6,[SP,#i]
   55 00000048 E7F4            B                loop_1
   56 0000004A         loop_2
   57 0000004A 9D00            LDR              R5,[SP,#i]
   58 0000004C F8DD 9000       LDR              R9,[SP,#i]
   59 00000050         ;LSL R5,R6,#1 ; 2*i
   60 00000050         ;MOV R4,#0x00
   61 00000050         ;STR R4,[R1,R6]
   62 00000050 F1A5 0501       SUB              R5,#1
   63 00000054 F04F 0601       MOV              R6,#1
   64 00000058         power_of_10
   65 00000058 2D00            CMP              R5,#0
   66 0000005A D006            BEQ              power_of_10_jump
   67 0000005C F04F 080A       MOV              R8,#10
   68 00000060 FB06 F608       MUL              R6,R8
   69 00000064 F1A5 0501       SUB              R5,#1
   70 00000068 E7F6            B                power_of_10
   71 0000006A         power_of_10_jump
   72 0000006A 9500            STR              R5,[SP,#i]
   73 0000006C 4604            MOV              R4,R0       ; R4=R0
   74 0000006E         loop_3
   75 0000006E         ;LDR R5,[SP,#i]
   76 0000006E         ;CMP R5,R9
   77 0000006E 2E00            CMP              R6,#0
   78 00000070 D015            BEQ              loop_4
   79 00000072         
   80 00000072 FBB4 F7F6       UDIV             R7,R4,R6    ; R6 is power of 10
                                                            
   81 00000076 FBB4 F5F6       UDIV             R5,R4,R6
   82 0000007A FB06 F805       MUL              R8,R6,R5    ; R8=R6*R5
   83 0000007E EBA4 0408       SUB              R4,R4,R8    ; R4=R4-R8
   84 00000082         
   85 00000082 9701            STR              R7,[SP,#num] ; Initialize num t
                                                            o stack
   86 00000084 9F01            LDR              R7,[SP,#num]
   87 00000086 F107 0730       ADD              R7,#0x30
   88 0000008A         
   89 0000008A F04F 050A       MOV              R5,#10
   90 0000008E FBB6 F6F5       UDIV             R6,R6,R5
   91 00000092         
   92 00000092 9D00            LDR              R5,[SP,#i]
   93 00000094 514F            STR              R7,[R1,R5]
   94 00000096 F105 0501       ADD              R5,#1       ; i++
   95 0000009A 9500            STR              R5,[SP,#i]
   96 0000009C E7E7            B                loop_3
   97 0000009E         loop_4
   98 0000009E         jmp_1
   99 0000009E B002            ADD              SP,#8
  100 000000A0 E8BD 43F0       POP{R4,R5,R6,R7,R8,R9,LR}
  101 000000A4 4770            BX               LR
  102 000000A6         ;* * * * * * * * End of Dec2String * * * * * * * *
  103 000000A6         
  104 000000A6         
  105 000000A6         ; -----------------------Fix2String---------------------



ARM Macro Assembler    Page 3 


                       -
  106 000000A6         ; Create characters for LCD display in fixed-point forma
                       t
  107 000000A6         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  108 000000A6         ; Inputs:  R0 is an unsigned 32-bit number
  109 000000A6         ;          R1 pointer to empty array
  110 000000A6         ; Outputs: none
  111 000000A6         ; E.g., R0=0,    then create "0.000 "
  112 000000A6         ;       R0=3,    then create "0.003 "
  113 000000A6         ;       R0=89,   then create "0.089 "
  114 000000A6         ;       R0=123,  then create "0.123 "
  115 000000A6         ;       R0=9999, then create "9.999 "
  116 000000A6         ;       R0>9999, then create "*.***"
  117 000000A6         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  118 000000A6         Fix2String
  119 000000A6 E92D 41F0       PUSH{R4,R5,R6,R7,R8,LR}
  120 000000AA B083            SUB              SP,#12
  121 000000AC F04F 0400       MOV              R4,#0
  122 000000B0 9400            STR              R4,[SP,#i]
  123 000000B2 F44F 747A       MOV              R4,#1000
  124 000000B6 9402            STR              R4,[SP,#delta] ; Initialize del
                                                            ta on stack
  125 000000B8 4604            MOV              R4,R0       ; R4=R0
  126 000000BA         ;LDR R5,[SP,#delta] ; R5=delta=1000
  127 000000BA F242 760F       MOV              R6,#9999
  128 000000BE F1B4 3FFF       CMP              R4,#0xFFFFFFFF
  129 000000C2 D001            BEQ              loop_greaterthan
  130 000000C4 42B4            CMP              R4,R6
  131 000000C6 DD11            BLE              lessthan_or_equal ; if(R4<=9999
                                                            ) -> jump
  132 000000C8         ; > 9999 -> "*.***"
  133 000000C8         loop_greaterthan
  134 000000C8 9C00            LDR              R4,[SP,#i]
  135 000000CA 2C05            CMP              R4,#5
  136 000000CC D030            BEQ              jump
  137 000000CE 2C01            CMP              R4,#1
  138 000000D0 D105            BNE              jump_1      ; -> jump_1
  139 000000D2 F04F 062E       MOV              R6,#0x2E    ; '.'
  140 000000D6         ;LSL R5,R4,#0
  141 000000D6 510E            STR              R6,[R1,R4]
  142 000000D8 F104 0401       ADD              R4,#1
  143 000000DC 9400            STR              R4,[SP,#i]  ; i++
  144 000000DE         jump_1
  145 000000DE         ;LSL R5,R4,#0
  146 000000DE F04F 062A       MOV              R6,#0x2A    ; '*'
  147 000000E2 510E            STR              R6,[R1,R4]
  148 000000E4 F104 0401       ADD              R4,#1
  149 000000E8 9400            STR              R4,[SP,#i]  ; i++
  150 000000EA E7ED            B                loop_greaterthan
  151 000000EC         
  152 000000EC         lessthan_or_equal
  153 000000EC         loop_5
  154 000000EC 9D02            LDR              R5,[SP,#delta]
  155 000000EE         ;MOV R4,R0
  156 000000EE 2D00            CMP              R5,#0
  157 000000F0 D022            BEQ              loop_6      ; delta=0 -> loop_6
                                                            



ARM Macro Assembler    Page 4 


  158 000000F2 FBB4 F6F5       UDIV             R6,R4,R5    ; R6=R4/R5=n/delta
  159 000000F6 9601            STR              R6,[SP,#num]
  160 000000F8 9F00            LDR              R7,[SP,#i]
  161 000000FA 2F01            CMP              R7,#1
  162 000000FC D105            BNE              jump_2      ; ->jump_2 if R7!=1
                                                            
  163 000000FE F04F 062E       MOV              R6,#0x2E    ; '.'
  164 00000102         ;LSL R8,R7,#0
  165 00000102 51CE            STR              R6,[R1,R7]
  166 00000104 F107 0701       ADD              R7,#1
  167 00000108 9700            STR              R7,[SP,#i]
  168 0000010A         jump_2
  169 0000010A 9E01            LDR              R6,[SP,#num]
  170 0000010C F106 0630       ADD              R6,#0x30
  171 00000110         ;LSL R8,R7,#0
  172 00000110 51CE            STR              R6,[R1,R7]
  173 00000112         ; n%=delta
  174 00000112 FBB4 F6F5       UDIV             R6,R4,R5    ; R6=R4/R5
  175 00000116 FB06 F805       MUL              R8,R6,R5
  176 0000011A EBA4 0408       SUB              R4,R4,R8
  177 0000011E         ; delta/=10
  178 0000011E F04F 080A       MOV              R8,#10
  179 00000122 FBB5 F5F8       UDIV             R5,R5,R8
  180 00000126 F107 0701       ADD              R7,#1
  181 0000012A 9700            STR              R7,[SP,#i]  ; i++
  182 0000012C 9502            STR              R5,[SP,#delta]
  183 0000012E E7DD            B                loop_5
  184 00000130         jump
  185 00000130 F04F 0600       MOV              R6,#0x0
  186 00000134 510E            STR              R6,[R1,R4]
  187 00000136 E002            B                skip
  188 00000138         loop_6
  189 00000138 F04F 0620       MOV              R6,#32
  190 0000013C 51CE            STR              R6,[R1,R7]
  191 0000013E         skip
  192 0000013E B003            ADD              SP,#12
  193 00000140 E8BD 41F0       POP{R4,R5,R6,R7,R8,LR}
  194 00000144         
  195 00000144 4770            BX               LR
  196 00000146         
  197 00000146         
  198 00000146         
  199 00000146         
  200 00000146 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  201 00000148                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\stringconversion.d -o.\stringconversion.o -I.\RTE\_Lab9 -IC:
\Users\ADMIN\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Us
ers\ADMIN\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --
predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 538" --predefine=
"_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --l
ist=.\stringconversion.lst ..\inc\StringConversion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file ..\inc\StringConversion.s
   Uses
      None
Comment: .text unused
Dec2String 00000000

Symbol: Dec2String
   Definitions
      At line 27 in file ..\inc\StringConversion.s
   Uses
      At line 10 in file ..\inc\StringConversion.s
Comment: Dec2String used once
Fix2String 000000A6

Symbol: Fix2String
   Definitions
      At line 118 in file ..\inc\StringConversion.s
   Uses
      At line 11 in file ..\inc\StringConversion.s
Comment: Fix2String used once
jmp 00000034

Symbol: jmp
   Definitions
      At line 46 in file ..\inc\StringConversion.s
   Uses
      At line 34 in file ..\inc\StringConversion.s
Comment: jmp used once
jmp_1 0000009E

Symbol: jmp_1
   Definitions
      At line 98 in file ..\inc\StringConversion.s
   Uses
      At line 45 in file ..\inc\StringConversion.s
Comment: jmp_1 used once
jump 00000130

Symbol: jump
   Definitions
      At line 184 in file ..\inc\StringConversion.s
   Uses
      At line 136 in file ..\inc\StringConversion.s
Comment: jump used once
jump_1 000000DE

Symbol: jump_1
   Definitions
      At line 144 in file ..\inc\StringConversion.s
   Uses
      At line 138 in file ..\inc\StringConversion.s
Comment: jump_1 used once
jump_2 0000010A

Symbol: jump_2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 168 in file ..\inc\StringConversion.s
   Uses
      At line 162 in file ..\inc\StringConversion.s
Comment: jump_2 used once
lessthan_or_equal 000000EC

Symbol: lessthan_or_equal
   Definitions
      At line 152 in file ..\inc\StringConversion.s
   Uses
      At line 131 in file ..\inc\StringConversion.s
Comment: lessthan_or_equal used once
loop_1 00000034

Symbol: loop_1
   Definitions
      At line 47 in file ..\inc\StringConversion.s
   Uses
      At line 55 in file ..\inc\StringConversion.s
Comment: loop_1 used once
loop_2 0000004A

Symbol: loop_2
   Definitions
      At line 56 in file ..\inc\StringConversion.s
   Uses
      At line 49 in file ..\inc\StringConversion.s
Comment: loop_2 used once
loop_3 0000006E

Symbol: loop_3
   Definitions
      At line 74 in file ..\inc\StringConversion.s
   Uses
      At line 96 in file ..\inc\StringConversion.s
Comment: loop_3 used once
loop_4 0000009E

Symbol: loop_4
   Definitions
      At line 97 in file ..\inc\StringConversion.s
   Uses
      At line 78 in file ..\inc\StringConversion.s
Comment: loop_4 used once
loop_5 000000EC

Symbol: loop_5
   Definitions
      At line 153 in file ..\inc\StringConversion.s
   Uses
      At line 183 in file ..\inc\StringConversion.s
Comment: loop_5 used once
loop_6 00000138

Symbol: loop_6
   Definitions
      At line 188 in file ..\inc\StringConversion.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 157 in file ..\inc\StringConversion.s
Comment: loop_6 used once
loop_greaterthan 000000C8

Symbol: loop_greaterthan
   Definitions
      At line 133 in file ..\inc\StringConversion.s
   Uses
      At line 129 in file ..\inc\StringConversion.s
      At line 150 in file ..\inc\StringConversion.s

power_of_10 00000058

Symbol: power_of_10
   Definitions
      At line 64 in file ..\inc\StringConversion.s
   Uses
      At line 70 in file ..\inc\StringConversion.s
Comment: power_of_10 used once
power_of_10_jump 0000006A

Symbol: power_of_10_jump
   Definitions
      At line 71 in file ..\inc\StringConversion.s
   Uses
      At line 66 in file ..\inc\StringConversion.s
Comment: power_of_10_jump used once
skip 0000013E

Symbol: skip
   Definitions
      At line 191 in file ..\inc\StringConversion.s
   Uses
      At line 187 in file ..\inc\StringConversion.s
Comment: skip used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

delta 00000008

Symbol: delta
   Definitions
      At line 26 in file ..\inc\StringConversion.s
   Uses
      At line 124 in file ..\inc\StringConversion.s
      At line 154 in file ..\inc\StringConversion.s
      At line 182 in file ..\inc\StringConversion.s

i 00000000

Symbol: i
   Definitions
      At line 24 in file ..\inc\StringConversion.s
   Uses
      At line 31 in file ..\inc\StringConversion.s
      At line 35 in file ..\inc\StringConversion.s
      At line 44 in file ..\inc\StringConversion.s
      At line 51 in file ..\inc\StringConversion.s
      At line 54 in file ..\inc\StringConversion.s
      At line 57 in file ..\inc\StringConversion.s
      At line 58 in file ..\inc\StringConversion.s
      At line 72 in file ..\inc\StringConversion.s
      At line 92 in file ..\inc\StringConversion.s
      At line 95 in file ..\inc\StringConversion.s
      At line 122 in file ..\inc\StringConversion.s
      At line 134 in file ..\inc\StringConversion.s
      At line 143 in file ..\inc\StringConversion.s
      At line 149 in file ..\inc\StringConversion.s
      At line 160 in file ..\inc\StringConversion.s
      At line 167 in file ..\inc\StringConversion.s
      At line 181 in file ..\inc\StringConversion.s

num 00000004

Symbol: num
   Definitions
      At line 25 in file ..\inc\StringConversion.s
   Uses
      At line 85 in file ..\inc\StringConversion.s
      At line 86 in file ..\inc\StringConversion.s
      At line 159 in file ..\inc\StringConversion.s
      At line 169 in file ..\inc\StringConversion.s

3 symbols
356 symbols in table
